// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  role        Role     @default(MEMBER)
  memberships ClubMembership[]
  eventRegistrations EventRegistration[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  MEMBER
  ADMIN
}

model Club {
  id          Int     @id @default(autoincrement())
  name        String
  category    String
  description String
  logo        String?
  approved    Boolean @default(false)
  active      Boolean @default(true)
  memberships ClubMembership[]
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ClubMembership {
  id        Int      @id @default(autoincrement())
  userId    Int
  clubId    Int
  status    MembershipStatus @default(PENDING)
  user      User     @relation(fields: [userId], references: [id])
  club      Club     @relation(fields: [clubId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MembershipStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EventType {
  CLUB
  INSTITUTE
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  type        EventType @default(CLUB)
  clubId      Int?
  club        Club?     @relation(fields: [clubId], references: [id])
  registrations EventRegistration[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EventRegistration {
  id      Int  @id @default(autoincrement())
  userId  Int
  eventId Int
  user    User @relation(fields: [userId], references: [id])
  event   Event @relation(fields: [eventId], references: [id])
  registeredAt DateTime @default(now())
}
